#!/usr/bin/env ruby

require 'yaml'
require_relative 'lib/rss_generator'
require_relative 'lib/site_builder'
require_relative 'lib/sitemap_generator'

def create_new_post(title)
  date = Time.now.to_s[0..9]
  file_name = "content/posts/#{date}-#{title.downcase.split(" ").join("-")}.md"
  content = <<~CONTENT
    ---
    title: "#{title}"
    date: "#{date}"
    slug: "change-me"
    description: "Add a nice description here. Aim for 150-160 characters."
    draft: true
    ---

    # #{title}
  
    ### Publish Date in Month Day, Year format (e.g. January 1st, 2025)
  CONTENT

  File.open(file_name, 'w') do |file| 
    file.write(content) 
  end

  # Open the new file in VSCode. Change to meet your setup if you don't use the code command to open files in VSCode.
  system("code #{file_name}")
end

case ARGV[0]
when "build"
  start_time = Time.now
  puts "Building the site..."
  SiteBuilder.build_index_page
  SiteBuilder.build_pages
  SiteMapGenerator.generate
  RssGenerator.generate
  end_time = Time.now 
  puts "Build complete | #{((end_time-start_time).to_f * 1000).round(2)} ms."

when "serve"
  puts "Serving the site..."
  
  index_path = "site/index.html"
  if File.exist?(index_path)
    system("open #{index_path}")  # For macOS
    # For Linux, use `xdg-open`:
    # system("xdg-open #{index_path}")
    # For Windows, use `start`:
    # system("start #{index_path}")
  else
    puts "Error: 'site/index.html' not found. Please build the site first."
  end

when "clean"
  content_files = Dir.glob("content/**/*").map do |file|
    if File.extname(file) == ".md"
      metadata = File.read(file).match(/^---\n(.*?)\n---/m)[1]
      yaml_data = YAML.load(metadata)
      yaml_data['slug']
    end
  end.compact

  # Add these files to content files since they have no md counterpart
  content_files << "404" << "rss" << "sitemap"

  site_files = Dir.glob("site/*.html").map { |file| File.basename(file, File.extname(file)) }

  files_to_delete = site_files - content_files

  files_to_delete.each do |file|
    file_path = "site/#{file}.html"
    File.delete(file_path) if File.exist?(file_path)
    puts "Deleted: #{file_path}"
  end

when "new"
  if ARGV[1]
    title = ARGV[1..-1].join(" ")
    create_new_post(title)
  else
    puts "Error: Please provide a title for the new post (kondo new \"My New Post\")"
  end
  
when "help", nil
  puts <<~HELP
    Kondo - A super-minimal static site generator

    Usage:
      kondo build    # Generate the static site
      kondo serve    # Open the site locally in your default browser
      kondo clean    # Removes files from site/ that have been deleted from content/
      kondo help     # Show this help message
  HELP

else
  puts "Unknown command: #{ARGV[0]}"
  puts "Run 'kondo help' for usage."
end